{
  "name": "validatorjs",
  "buildname": "validator",
  "title": "Validator constructor function for easy data validation on both the client and server side.",
  "description": "A constructor function for data validation on both the server and client, inspired by the Laravel PHP framework's Validator class.",
  "version": "1.0.2",
  "homepage": "https://github.com/skaterdav85/validatorjs",
  "author": {
    "name": "David",
    "email": "dtang85@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/skaterdav85/validatorjs"
  },
  "bugs": {
    "url": "https://github.com/skaterdav85/validatorjs/issues?labels=bug&milestone=1&page=1&state=open"
  },
  "keywords": [
    "validatorjs, validator.js, data validation, validator, validate, validation, data, laravel, laravel-validator-for-js"
  ],
  "devDependencies": {
    "grunt": "0.4.2",
    "grunt-contrib-jshint": "0.8.0",
    "grunt-contrib-uglify": "0.3.3"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "gitHead": "301ebbe9afe949a4233606d3a5f16e14be5c820e",
  "readmeFilename": "README.md",
  "main": "./src/validator.js",
  "scripts": {
    "test": "jasmine-node spec/ --verbose --color"
  },
  "readme": "validatorjs v1.0.1\n==================\n\n[![Build Status](https://travis-ci.org/skaterdav85/validatorjs.png?branch=master)](https://travis-ci.org/skaterdav85/validatorjs)\n\nThe validatorjs library makes data validation in JavaScript very easy in both the browser and server (Node.js). This library was inspired by the [Laravel framework's Validator class](http://laravel.com/docs/validation) so you will see a lot of similarities.\n\n### 1.0.0 Changes\n\n* In versions < 1.0.0, most validation rules had an implicit 'required' rule. For example, if I specified that a field had the 'email' validation flag, it would fail if an empty string was passed. This made it difficult to have optional fields with required formats. In v1.0.0, the validation rules do not have an implicit 'required'. If a field is undefined or an empty string, it will pass validation. If you want a validation to fail for undefined or '', use the _required_ rule.\n* validation_instance.first() has been removed. Use validation_instance.errors.first() instead\n\n### Browser Setup\n\n1. Include __dist/validator.min.js__ script onto your page.\n2. Invoke the Validator constructor function. See below for details on Validator parameters and validation rules.\n\n### Node.js Setup\n\nInstall the Validator package from the NPM registry [https://npmjs.org/package/validatorjs](https://npmjs.org/package/validatorjs)\n\n```\nnpm install validatorjs\n```\n\n```js\nvar Validator = require('validatorjs');\n```\n\n### Usage and Examples\n\n```js\nvar validation = new Validator(data, rules [, customErrorMessages]);\n```\n\n__data__<br>\nType: Object<br>\nAn object that contains the data you want to validate<br>\n\n__rules__<br>\nType: Object<br>\nAn object that contains the validation rules\n\n__customErrorMessages__<br>\nType: Object<br>\nAn optional object that can contain custom error messages to return\n\n#### Example 1\n\n```js\nvar data = {\n\tname: 'David',\n\temail: 'david@gmail.com',\n\tage: 28\n};\n\nvar rules = {\n\tname: 'required',\n\temail: 'required|email',\n\tage: 'min:18'\n};\n\nvar validation = new Validator(data, rules);\n\nvalidation.passes(); // true\nvalidation.fails(); // false\n```\n\nTo apply validation rules to the _data_ object, use the same object key names for the _rules_ object.\n\n#### Example 2\n\n```js\nvar validation = new Validator({\n\tname: 'D',\n\temail: 'not an email address.com'\n}, {\n\tname: 'size:3',\n\temail: 'required|email'\n});\n\nvalidation.fails(); // true\nvalidation.passes(); // false\n\n// Error messages\nvalidation.errors.first('email'); // 'The email format is invalid.'\nvalidation.errors.get('email'); // returns an array of all email error messages\n```\n\n### Validation Rules\n\nNote: Input values of _undefined_ or an empty string '' will pass as true. Use the _required_ flag if they should fail validation.\n\n#### accepted\n\nThe field under validation must be yes, on, or 1. This is useful for validating \"Terms of Service\" acceptance.\n\n#### alpha\n\nThe field under validation must be entirely alphabetic characters.\n\n#### alpha_dash\n\nThe field under validation may have alpha-numeric characters, as well as dashes and underscores.\n\n#### alpha_num\n\nThe field under validation must be entirely alpha-numeric characters.\n\n#### confirmed\n\nThe field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n\n#### different:attribute\n\nThe given field must be different than the field under validation.\n\n\n#### email\n\nThe field under validation must be formatted as an e-mail address.\n\n```\n\taddress: 'email'\n```\n\n#### in:foo,bar,...\n\nThe field under validation must be included in the given list of values.\n\n####integer\n\nThe field under validation must have an integer value.\n\n#### max:value\n\nValidate that an attribute is no greater than a given size\n\n```\ncost: 'max:100'\n```\n_Note: Maximum checks are inclusive._\n\n#### min:value\n\nValidate that an attribute is at least a given size.\n\n```\npayment: 'min:10'\n```\n\n_Note: Minimum checks are inclusive._\n\n#### not_in:foo,bar,...\n\nThe field under validation must not be included in the given list of values.\n\n#### numeric\n\nValidate that an attribute is numeric. The string representation of a number will pass.\n\n```\nage: 'numeric'\n```\n\n#### required\n\nChecks if the length of the String representation of the value is >\n\n```\nusername: 'required'\n```\n\n\n\n#### same:attribute\n\nThe given field must match the field under validation.\n\n\n#### size:value\n\nValidate that an attribute is a given length, or, if an attribute is numeric, is a given value\n\n\n```\nduration: 'size:2'\n```\n\n#### url\n\nValidate that an attribute has a valid URL format\n\n```\nlink: 'url'\n```\n\n### Registering Custom Validation Rules\n\n```js\nValidator.register(custom_rule_name, callbackFn, errorMessage);\n```\n\n* custom_rule_name - string\n* callbackFn - function. If callbackFn returns a truthy value, the validation will pass for this rule. Otherwise, this validation rule will fail. \n* errorMessage is an optional string where you can specify a custom error message. _:attribute_ inside errorMessage will be replaced with the attribute name.\n\n```js\nValidator.register('telephone', function(value, requirement, attribute) { // requirement paramter defaults to null\n\treturn val.match(/^\\d{3}-\\d{3}-\\d{4}$/);\n}, 'The :attribute phone number is not in the format XXX-XXX-XXXX.');\n```\n\n### Error Messages\n\nThis contructor will automatically generate error messages for validation rules that failed. \n\nIf there are errors, the Validator instance will have its __errors__ property object populated with the error messages for all failing attributes. The methods and properties on the __errors__ property object are:\n\n#### .first(attribute)\n\nreturns the first error message for an attribute, false otherwise\n\n#### .get(attribute)\n\nreturns an array of error messages for an attribute, or an empty array if there are no errors\n\n####.errorCount\n\nthe number of validation errors\n\n```js\nvar validation = new Validator(input, rules);\nvalidation.errors.first('email'); // returns first error message for email attribute\nvalidator.errors.get('email'); // returns an array of error messages for the email attribute\n```\n\n### Custom Error Messages\n\nIf you need a specific error message and you don't want to override the default one, you can pass an override as the third argument to the Validator object, just like with [Laravel](http://laravel.com/docs/validation#custom-error-messages). \n\n```js\nvar input = {\n\tname: ''\n};\n\nvar rules = {\n\tname : 'required'\n};\n\nvar validation = new Validator(input, rules, {required: 'You forgot to give a :attribute'});\nvalidation.errors.first('name'); // returns 'You forgot to give a name'\n```\n\nSome of the validators have string and numeric versions. You can change them too.\n\n```js\nvar input = {\n\tusername: 'myusernameistoolong'\n};\n\nvar rules = {\n\tusername : 'max:16'\n};\n\nvar validation = new Validator(input, rules, {max: {string: 'The :attribute is too long. Max length is :max.'}});\nvalidation.errors.first('username'); // returns 'The username is too long. Max length is 16.'\n```\n\nYou can even provide error messages on a per attribute basis! Just set the message's key to 'validator.attribute'\n\n```js\nvar input = { name: '', email: '' };\nvar rules = { name : 'required', email : 'required' };\n\nvar validation = new Validator(input, rules, { 'required.email': 'Without an :attribute we can\\'t reach you!' });\nvalidation.errors.first('name'); // returns  'The name field is required.'\nvalidation.errors.first('email'); // returns 'Without an email we can\\'t reach you!'\n```\n\n### Public Instance Methods\n\n* .passes() - returns boolean\n* .fails() - returns boolean\n\n### Testing\n\nInstall node module dependencies\n\n```\nnpm install\n```\n\nSee __SpecRunner.html__ for Jasmine tests in the browser. \n\nYou can also run the jasmine tests via Node.js once you've installed the NPM package [jasmine-node](https://www.npmjs.org/package/jasmine-node) globally.\n\n```\njasmine-node spec/ --verbose --color\n# OR\nnpm test (which calls the above command)\n```\n\n### Build\n\n```\ngrunt\n```\n",
  "_id": "validatorjs@1.0.2",
  "dist": {
    "shasum": "7ecea84d4265aaca7c9869a2ac71c11a1913a7bc"
  },
  "_from": "validatorjs@",
  "_resolved": "https://registry.npmjs.org/validatorjs/-/validatorjs-1.0.2.tgz"
}
